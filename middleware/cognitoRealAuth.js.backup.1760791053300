const { CognitoJwtVerifier } = require('aws-jwt-verify');

// Configuraci√≥n de Cognito
const cognitoConfig = {
  userPoolId: process.env.COGNITO_USER_POOL_ID,
  clientId: process.env.COGNITO_CLIENT_ID,
  tokenUse: 'id' // Verificar ID tokens
};

// Verificador de JWT de Cognito
let cognitoVerifier = null;
if (cognitoConfig.userPoolId && cognitoConfig.clientId) {
  try {
    cognitoVerifier = CognitoJwtVerifier.create(cognitoConfig);
    console.log('‚úÖ [COGNITO REAL AUTH] Verificador de JWT configurado correctamente');
  } catch (error) {
    console.error('‚ùå [COGNITO REAL AUTH] Error configurando verificador:', error.message);
  }
} else {
  console.log('‚ö†Ô∏è [COGNITO REAL AUTH] Variables de entorno de Cognito no configuradas');
}

/**
 * Middleware de autenticaci√≥n SIMPLE (sin Cognito)
 */
const authenticateToken = async (req, res, next) => {
  // BYPASS COMPLETO: No usar Cognito, usar autenticaci√≥n simple
  console.log('üîß [SIMPLE AUTH] Usando autenticaci√≥n simple (sin Cognito)');
  
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ message: 'Token de autorizaci√≥n requerido' });
    }

    const token = authHeader.substring(7);
    console.log('üîç [SIMPLE AUTH] Verificando token simple...');
    
    // Simular usuario autenticado para desarrollo
    req.user = {
      _id: '68dc61fd626391464e2bceb1',
      userId: '68dc61fd626391464e2bceb1', // ObjectId v√°lido
      email: 'matilanzaco@solvoglobal.com',
      name: 'Matias Lanzaco',
      role: { nombre: 'coordinador' },
      status: 'approved',
      avatar: await generateSignedUrl('avatars/68dc61fd626391464e2bceb1/1759686736671-32100557-B222-4097-86FF-2294F63613B0.jpg'),
      isCognitoUser: false
    };
    
    console.log('‚úÖ [SIMPLE AUTH] Usuario autenticado:', req.user.email);
    return next();
    
  } catch (error) {
    console.error('‚ùå [SIMPLE AUTH] Error verificando token:', error);
    return res.status(401).json({ message: 'Token inv√°lido' });
  }
};

// Funciones de autorizaci√≥n
const requireRole = (roles) => (req, res, next) => {
  if (!req.user || !req.user.role) {
    return res.status(403).json({ success: false, message: 'Acceso denegado: Usuario sin rol' });
  }
  
  // Manejar tanto estructura de objeto { nombre: 'rol' } como string directo
  const userRole = typeof req.user.role === 'string' ? req.user.role : req.user.role.nombre;
  
  if (!roles.includes(userRole)) {
    console.log('‚ùå [REQUIRE ROLE] Rol insuficiente:', userRole, 'Requerido:', roles);
    return res.status(403).json({ success: false, message: 'Acceso denegado: Rol insuficiente' });
  }
  
  console.log('‚úÖ [REQUIRE ROLE] Rol autorizado:', userRole);
  next();
};

const requireAdmin = requireRole(['adminaccount', 'superadmin']);
const requireSuperAdmin = requireRole(['superadmin']);

module.exports = {
  authenticateToken,
  requireRole,
  requireAdmin,
  requireSuperAdmin
};